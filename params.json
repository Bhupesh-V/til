{"name":"til - Bhupesh Varshney","tagline":"Today I Learned : Interesting things I learn everyday related to software development, computer science & stuff.","body":"\r\n<h1 align=\"center\">Today I Learned</h1>\r\n<p align=\"center\">\r\n  <img height=\"200px\" src=\"https://repository-images.githubusercontent.com/192476462/fdd6ce80-0b94-11ea-8b50-812ee66b0599\" />\r\n  <br>\r\n  <img alt=\"TILs Count\" src=\"https://img.shields.io/badge/dynamic/json.svg?color=black&label=TILs&query=count&url=https%3A%2F%2Fraw.githubusercontent.com%2FBhupesh-V%2Ftil%2Fmaster%2Fcount.json\">\r\n  <img alt=\"last commit\" src=\"https://img.shields.io/github/last-commit/bhupesh-V/TIL?color=purple\">\r\n  <a href=\"https://github.com/Bhupesh-V/til/blob/master/LICENSE\">\r\n    <img alt=\"License: MIT\" src=\"https://img.shields.io/github/license/Bhupesh-V/til\" target=\"_blank\" />\r\n  </a>\r\n  <a href=\"https://bhupesh.codes/til/\">\r\n    <img alt=\"Website Status\" src=\"https://img.shields.io/website?down_color=red&down_message=offline&up_color=orange&up_message=online&url=https%3A%2F%2Fbhupesh.codes%2Ftil%2F\" />\r\n  </a>\r\n  <a href=\"https://twitter.com/bhupeshimself\">\r\n    <img alt=\"Twitter: Bhupesh Varshney\" src=\"https://img.shields.io/twitter/follow/bhupeshimself.svg?style=social\" target=\"_blank\" />\r\n  </a>\r\n</p>\r\n\r\n> Today I Learned.\r\nA collection of concise write-ups on small things I learn across a variety of \r\nlanguages and technologies.\r\n\r\n\r\n\r\n\r\n## Categories\r\n* [CleanCode](#cleancode)\r\n* [Go](#go)\r\n* [Miscellaneous](#miscellaneous)\r\n* [Python](#python)\r\n* [Shell](#shell)\r\n* [WebDev](#webdev)\r\n\r\n---\r\n\r\n\r\n\r\n\r\n### CleanCode\r\n\r\n<ul>\r\n<li><a href=\"CleanCode/cleancode-naming.md\">Naming Variables & Functions</a><details><summary> Read More 👇</summary>\r\n\r\n# Naming Variables & Functions\r\n<!--24 Jun 2019 -->\r\n1. The name of a variable, function, or class should answer all the big questions.\r\n   It should tell you why it exists, what it does, and how it is used.\r\n2. Classes & Objects should have *noun* or noun phrase names like *Student*,*Account* etc.\r\n   A class name should not be a *verb*.\r\n3. Methods should have verb or verb phrase names like *getCategories()*, *saveTutorial()*.\r\n\r\n---\r\n_PS : I have been reading [CleanCode](https://www.oreilly.com/library/view/clean-code/9780136083238/) for a while & logging what I learn here._\r\n</details></li>\r\n<li><a href=\"CleanCode/write-clean-comments.md\">Writing Comments</a><details><summary> Read More 👇</summary>\r\n\r\n# Writing Comments\r\n<!--24 Jun 2019 -->\r\n1. The proper use of comments is to compensate for our _failure to express\r\n   ourself in code_.\r\n2. Inaccurate comments are far worse than no comments at all.\r\n3. Comments do not make up for the bad code.\r\n   i.e if you find yourself writing comments for a code that is complex to understand.\r\n   *MAKE IT LESS COMPLEX*.\r\n4. Short functions don't need much description. A well-chosen name for a small function\r\n   that does one thing is usually better than a comment header.\r\n5. For example. In this code the comments are not needed bcoz the fucntion name describes what it is doing.\r\n   \r\n```python\r\ndef get_category_list():\r\n    ''' Walk the current directory and get a list of all subdirectories at that\r\n    level.  These are the \"categories\" in which there are TILs. '''\r\n    dirs = [x for x in os.listdir('.') if os.path.isdir(x) and '.git' not in x]\r\n    return dirs\r\n```\r\n   \r\n### Summary\r\nUntil now I thought writing comments is a good practice & we should write comments wherever possible.\r\nBut know reading it is an eye opener & shocking 😱. I will try to avoid comments now.\r\n\r\n---\r\n_PS : I have been reading [CleanCode](https://www.oreilly.com/library/view/clean-code/9780136083238/) for a while & logging what I learn here._\r\n\r\n</details></li>\r\n<li><a href=\"CleanCode/cleancode-writing-functions.md\">Writing Functions</a><details><summary> Read More 👇</summary>\r\n\r\n# Writing Functions\r\n<!-- 24 Jun 2019 -->\r\nGot to learn some new points regarding functions() in CleanCode.\r\n\r\n1. Functions should be small.\r\n2. They should do one thing only.\r\n   > FUNCTIONS SHOULD DO ONE THING. THEY SHOULD DO IT WELL.\r\n     THEY SHOULD DO IT ONLY.\r\n3. To know if a function is doing more than \"one thing\" see if you can extract another\r\n   funtion from it with a name that is not merely a restatement of its implementation.\r\n4. Function arguments should *NEVER* be greater than 3.\r\n5. We should never ignore any part of code.The parts we ignore are where the bugs will hide.\r\n\r\n---\r\n_PS : I have been reading [CleanCode](https://www.oreilly.com/library/view/clean-code/9780136083238/) for a while & logging what I learn here._\r\n\r\n</details></li>\r\n</ul>\r\n\r\n\r\n### Go\r\n\r\n<ul>\r\n<li><a href=\"Go/clear-terminal-screen-in-go.md\">Clearing terminal screen in Go</a><details><summary> Read More 👇</summary>\r\n\r\n# Clearing terminal screen in Go\r\n<!-- 5 June 2020 -->\r\nThere are two ways I like (without any external dependency)\r\n\r\n### Using `os/exec` package\r\n\r\nI have added some boilerplate code to make sure you see whats happening. I think this is probably the best way to do this.\r\n\r\n```golang\r\npackage main\r\n \r\nimport (\r\n    \"os\"\r\n    \"fmt\"\r\n    \"os/exec\"\r\n    \"time\"\r\n)\r\n \r\nfunc main() {\r\n\tfmt.Println(\"this is a line\")\r\n\tfmt.Println(\"this is a line\")\r\n\tfmt.Println(\"this is a line\")\r\n\tfmt.Println(\"this is a line\")\r\n\tfmt.Println(\"this is a line\")\r\n\r\n\tfmt.Println(\"Clearing Screen in 2s...\")\r\n\r\n\t// sleep for 2 seconds\r\n\tduration, _ := time.ParseDuration(\"2s\")\r\n\ttime.Sleep(duration)\r\n    \r\n    c := exec.Command(\"clear\")\r\n    c.Stdout = os.Stdout\r\n    c.Run()\r\n}\r\n```\r\n\r\n### Using ANSI Escape Sequences\r\n\r\nNot a good way but may come in handy for some situations.\r\n\r\n```golang\r\n\r\npackage main\r\n \r\nimport (\r\n    \"fmt\"\r\n    \"time\"\r\n)\r\n \r\nfunc main() {\r\n\tfmt.Println(\"this is a line\")\r\n\tfmt.Println(\"this is a line\")\r\n\tfmt.Println(\"this is a line\")\r\n\tfmt.Println(\"this is a line\")\r\n\tfmt.Println(\"this is a line\")\r\n\r\n\tfmt.Println(\"Clearing Screen in 1s...\")\r\n\tdur, _ := time.ParseDuration(\"1s\")\r\n\ttime.Sleep(dur)\r\n\r\n    fmt.Print(\"\\033[2J\")\r\n}\r\n```\r\n\r\n> The sequence `\\033[2J` is read as _Esc[2J_ where *\"2j\"* clears the screen and moves the cursor to the home position (line 0, column 0).\r\n</details></li>\r\n<li><a href=\"Go/string-to-int-and-vice-versa.md\">Convert `string` to `int` and vice-versa in Go</a><details><summary> Read More 👇</summary>\r\n\r\n# Convert `string` to `int` and vice-versa in Go\r\n<!-- 31 May 2020 -->\r\nThere are basically 2-3 methods to convert integer to string and back to integer but the most easiest way is to use the `Itoa` and `Atoi` methods in the `strconv` package.\r\n\r\n\r\n## Demo\r\n\r\n```golang\r\npackage main\r\n\r\nimport (\r\n    \"fmt\"\r\n    \"strconv\"\r\n)\r\n\r\nfunc main() {\r\n\t// String to Int\r\n\tnice, _ := strconv.Atoi(\"69\")\r\n\tfmt.Printf(\"%T\", nice)\r\n\r\n\t//Integer to String\r\n\thigh := strconv.Itoa(420)\r\n\tfmt.Printf(\"\\n%T\", high)\r\n}\r\n```\r\n\r\n`Atoi` returns a second value (`err` ignored in this example for easier understanding)\r\n\r\nThe above code should output:\r\n```\r\nint\r\nstring\r\n```\r\nSee [online](https://play.golang.org/p/moTZJ5LYEz9) demo\r\n\r\n</details></li>\r\n<li><a href=\"Go/python-next-alternative-go-clousers.md\">Creating Python's `next()` alternative using Go Closures</a><details><summary> Read More 👇</summary>\r\n\r\n# Creating Python's `next()` alternative using Go Closures\r\n<!-- 4 June 2020 -->\r\nIf you don't know what next() in python means, the below code illustrates it.\r\n\r\n```python\r\n\r\nMCU_Movies = iter([\"Iron Man\", \"Thor\", \"Captain America: The first Avenger\"])\r\nx = next(MCU_Movies)\r\nprint(x, end=\"\\n\")\r\nx = next(MCU_Movies)\r\nprint(x, end=\"\\n\")\r\nx = next(MCU_Movies)\r\nprint(x)\r\n\r\n```\r\n\r\nSo if you had guess this would print\r\n\r\n```bash\r\nIron Man\r\nThor\r\nCaptain America: The first Avenger\r\n```\r\n\r\n> The `next()` function is used to get the next item in an iterator.\r\n\r\nGo doesn't have a next method (nor the concept of iterators actually) so we will try to achieve something similar using [Closures](https://tour.golang.org/moretypes/25).\r\n\r\n\r\n- A closure is implemented through a anonymous(_function with no name_) function, basically closure is an instance of function.\r\n- In Go functions are first class citizens, meaning we can do all sort of things with them, assign them to a variable, pass as an argument to another function.\r\n\r\nBelow is a naive implementation of how this could look in Go. Ping me if you have a better way to do this ;)\r\n\r\n```golang\r\n\r\npackage main\r\n\r\nimport \"fmt\"\r\n\r\n/*\r\nnextIterator returns another function, which we define anonymously in the body of nextIterator.\r\nThe returned function closes over the variable index to form a closure.\r\n*/\r\nfunc nextIterator(array []int) func() int {\r\n    index := -1\r\n\r\n    return func() int{\r\n        index++\r\n        return array[index]\r\n    }\r\n}\r\nfunc main() {\r\n\r\n\t// an integer array\r\n    var prices = []int{7, 1, 5}\r\n\r\n    // create an instance of the anonymous function. i.e, a closue\r\n    next := nextIterator(prices)\r\n\r\n    // call the closure\r\n    fmt.Println(next())\r\n    fmt.Println(next())\r\n    fmt.Println(next())\r\n\r\n}\r\n```\r\n\r\nSee this demo on [Go Playground](https://play.golang.org/p/8nH6t0HfnGu).\r\n</details></li>\r\n<li><a href=\"Go/measure-execution-time-in-go.md\">Measure Exection time in Go</a><details><summary> Read More 👇</summary>\r\n\r\n# Measure Exection time in Go\r\n<!-- 2 June 2020 -->\r\nTo know who how long your go code executes you can use the `time.Now()` and `time.Since()` methods in the `time` package.\r\n\r\n## Demo\r\n\r\n```golang\r\n\r\npackage main\r\n\r\nimport (\r\n\t\"fmt\"\r\n\t\"time\"\r\n)\r\n\r\nfunc main(){\r\n\r\n\tstart := time.Now()\r\n\tdur, _ := time.ParseDuration(\"15ms\")\r\n\r\n\t// A Go Anonymous function (self-executing)\r\n\tfunc (){\r\n\t\tfor i := 0; i < 100; i++ {\r\n\t\t\ttime.Sleep(dur)\r\n\t\t\tfmt.Println(\"Bhupesh is programming in Go\")\r\n\t\t}\r\n\t}()\r\n\r\n\telapsed := time.Since(start)\r\n\r\n\tfmt.Printf(\"Execution Time : %s\", elapsed)\r\n}\r\n\r\n```\r\n\r\nSince() returns the time elapsed since t (`start` in our demo). It is shorthand for `time.Now().Sub(t)`.\r\n\r\nHere is the output of the above code\r\nYou can also play with the [online](https://play.golang.org/p/YgiaYf_Wetq) demo\r\n\r\n\r\n```\r\nBhupesh is programming in Go\r\nBhupesh is programming in Go\r\nBhupesh is programming in Go\r\nBhupesh is programming in Go\r\nBhupesh is programming in Go\r\nBhupesh is programming in Go\r\nBhupesh is programming in Go\r\nBhupesh is programming in Go\r\nBhupesh is programming in Go\r\nBhupesh is programming in Go\r\nBhupesh is programming in Go\r\nBhupesh is programming in Go\r\nBhupesh is programming in Go\r\nBhupesh is programming in Go\r\nBhupesh is programming in Go\r\nBhupesh is programming in Go\r\nBhupesh is programming in Go\r\nBhupesh is programming in Go\r\nBhupesh is programming in Go\r\nBhupesh is programming in Go\r\nBhupesh is programming in Go\r\nBhupesh is programming in Go\r\nBhupesh is programming in Go\r\nBhupesh is programming in Go\r\nBhupesh is programming in Go\r\nBhupesh is programming in Go\r\nBhupesh is programming in Go\r\nBhupesh is programming in Go\r\nBhupesh is programming in Go\r\nBhupesh is programming in Go\r\nBhupesh is programming in Go\r\nBhupesh is programming in Go\r\nBhupesh is programming in Go\r\nBhupesh is programming in Go\r\nBhupesh is programming in Go\r\nBhupesh is programming in Go\r\nBhupesh is programming in Go\r\nBhupesh is programming in Go\r\nBhupesh is programming in Go\r\nBhupesh is programming in Go\r\nBhupesh is programming in Go\r\nBhupesh is programming in Go\r\nBhupesh is programming in Go\r\nBhupesh is programming in Go\r\nBhupesh is programming in Go\r\nBhupesh is programming in Go\r\nBhupesh is programming in Go\r\nBhupesh is programming in Go\r\nBhupesh is programming in Go\r\nBhupesh is programming in Go\r\nExecution Time : 750ms\r\n```\r\n\r\n</details></li>\r\n<li><a href=\"Go/reading-and-setting-environment-variables-in-go.md\">Reading & Setting Environment variables in Go</a><details><summary> Read More 👇</summary>\r\n\r\n# Reading & Setting Environment variables in Go\r\n<!-- 9 June 2020 -->\r\nUse `os.Getenv()` and `os.Setenv()` for reading and setting environment variables.\r\n\r\n## Demo\r\n\r\n```golang\r\npackage main\r\n\r\nimport (\r\n\t\"fmt\"\r\n\t\"os\"\r\n)\r\n\r\nfunc main() {\r\n\tos.Setenv(\"NAME\", \"gopher\")\r\n\r\n\tfmt.Printf(\"My Desktop Environment : %s.\\n\", os.Getenv(\"XDG_CURRENT_DESKTOP\"))\r\n}\r\n```\r\n</details></li>\r\n<li><a href=\"Go/split-strings-in-go.md\">Splitting strings in Go</a><details><summary> Read More 👇</summary>\r\n\r\n# Splitting strings in Go\r\n<!-- 31 May 2020 -->\r\nSplitting strings in Go is done by using the `Split()` method.\r\nYou need to import the `strings` standard library to use this.\r\n\r\n## Demo\r\n\r\n```golang\r\npackage main \r\n\r\nimport (\r\n\t\"fmt\"\r\n\t\"strings\"\r\n)\r\n\r\nfunc main(){\r\n\tvar date string = \"1999-03-12\"\r\n\tdate_array = strings.Split(date, \"-\")\r\n\r\n\tfmt.Println(date_array)\r\n}\r\n```\r\n\r\nThe `split()` return a Go Array, running this program should print the following:\r\n```\r\n[1999 03 12]\r\n```\r\n</details></li>\r\n<li><a href=\"Go/where-are-my-build-files-when-i-use-go-run.md\">Where are my build files when I use `go run`</a><details><summary> Read More 👇</summary>\r\n\r\n# Where are my build files when I use `go run`\r\n<!-- 9 June 2020 -->\r\nBy default, 'go run' runs the compiled binary directly.\r\nThe binaries are stored in a `temp` work folder, to see where they are stored use the `-work` flag.\r\n\r\n\r\n## Demo\r\n\r\n```bash\r\ngo run --work fizzbuzz.go\r\n```\r\n\r\nSample Output\r\n\r\n```\r\nWORK=/tmp/go-build645222420\r\n[1 2 Fizz]\r\n```\r\n\r\nWhen you run this go will not delete the temporary build when exiting.\r\nThe default directory may vary with your system & `GOPATH`.\r\n</details></li>\r\n</ul>\r\n\r\n\r\n### Miscellaneous\r\n\r\n<ul>\r\n<li><a href=\"Miscellaneous/deploy-to-heroku.md\">Deploying to Heroku</a><details><summary> Read More 👇</summary>\r\n\r\n# Deploying to Heroku\r\n<!--15 Oct 2019 -->\r\n## List of steps to follow when you are deployihg a **new** repository/project (Python).\r\n\r\n1. `heroku login`\r\n2. `touch Procfile`\r\nCreate Procfile for deployment. For a Django Web-App the contents of Procfile would be.\r\n```\r\ngunicorn djangoherokuapp.wsgi --log-file -\r\n```\r\n3. `touch runtime.txt`\r\nSpecify your Python version here. For example\r\n```\r\npython-3.6.8\r\n```\r\n4. `heroku create herokuAPPName`\r\nBefore running this, Make sure to add `appname.herokuapp.com` in ALLOWED_HOSTS and your `requirements.txt` is updated.\r\n\r\n\r\n## List of commands to run when you are deployihg a **cloned** repository.\r\n\r\n1. `heroku login`\r\nLogin with your e-mail and password.\r\n2. `heroku git:remote -a <app-name>`\r\nWhere `app-name` is the name of app on heroku.\r\n3. `git push heroku master`\r\nPush new changes to heroku.\r\n</details></li>\r\n<li><a href=\"Miscellaneous/internet-search-tricks-tips-for-developers.md\">Internet search tips & tricks for developers</a><details><summary> Read More 👇</summary>\r\n\r\n# Internet search tips & tricks for developers\r\n<!-- 7 June 2020 -->\r\nAll of the below mentioned tips works in both DuckDuckGo & Google (i use both :wink:), it should work fine in other search engines too.\r\n\r\n1. **`filetype:pdf golang`**\r\n\r\n> Use it to search for books or specific file types\r\n\r\n2. **`inurl:docs.djangoproject.com templates`**\r\n\r\n> Use it to look for occurence of some phrases in the URL of the website mentioned.\r\n`inurl` [docs.djangoproject.com](docs.djangoproject.com) look for `templates` phrase.\r\n\r\n3. **`site:github.com synatx error`**\r\n\r\n> Limit search results to a specific site, good for looking for bug fixes.\r\n\r\n4. **`\"how to add pagination in django\"`**\r\n\r\n> Double quotes can be used for exact matches of the phrase (doesn't work sometimes).\r\n\r\n</details></li>\r\n<li><a href=\"Miscellaneous/kill-open-ports-linux.md\">Killing Open Ports in Linux</a><details><summary> Read More 👇</summary>\r\n\r\n# Killing Open Ports in Linux\r\n<!--27 Jan 27 2020 -->\r\nI had this weird error while running Django Development Server.\r\n\r\n```\r\nSystem check identified no issues (0 silenced).\r\nJanuary 27, 2020 - 16:42:39\r\nDjango version 2.2.9, using settings 'codeclassroom.settings'\r\nStarting development server at http://127.0.0.1:8000/\r\nQuit the server with CONTROL-C.\r\nError: That port is already in use.\r\n```\r\n\r\n## Solution\r\n1. Run `netstat -ntlp` to see available open ports.\r\n```\r\n(Not all processes could be identified, non-owned process info\r\n will not be shown, you would have to be root to see it all.)\r\nActive Internet connections (only servers)\r\nProto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    \r\ntcp        0      0 127.0.0.1:42405         0.0.0.0:*               LISTEN      -                   \r\ntcp        0      0 127.0.0.1:5940          0.0.0.0:*               LISTEN      -                   \r\ntcp        0      0 127.0.0.53:53           0.0.0.0:*               LISTEN      -                   \r\ntcp        0      0 127.0.0.1:631           0.0.0.0:*               LISTEN      -                   \r\ntcp        0      0 127.0.0.1:8000          0.0.0.0:*               LISTEN      12054/python3       \r\ntcp6       0      0 ::1:631                 :::*                    LISTEN      -  \r\n```\r\n\r\nHere is a `man netstat` for what it does\r\n> netstat  -  Print  network connections, routing tables, interface statistics,\r\n       masquerade connections, and multicast memberships\r\n\r\nYou see the _python3_ one? Kill 😈 this process\r\n\r\n2. Run `kill -9 12054`\r\nKill is used for Removing a background process or job, `-9` specifies SIGKILL (Forced termination) where `12054` is the PID\r\n\r\n3. Run the development server again.\r\n\r\n</details></li>\r\n<li><a href=\"Miscellaneous/my-vim-cheatsheet.md\">My vim cheatsheet</a><details><summary> Read More 👇</summary>\r\n\r\n# My vim cheatsheet\r\n<!-- 14 June, 2020 -->\r\nI have started transitioning slowly to lightweight editors, because of my low system configuration.\r\nAnd what can better than `vim`, so I will start logging interesting things I learn here.\r\n\r\nFor starters I use **neovim**.\r\n(PS: I will write this TIL through vim only :)\r\n\r\n### How to install plugins\r\n1. Open up the `~/.config/nvim/init.vim` file add the plugin.\r\n\r\nMy init file\r\n```\r\ncall plug#begin()\r\nPlug 'roxma/nvim-completion-manager'\r\nPlug 'SirVer/ultisnips'\r\nPlug 'honza/vim-snippets'\r\nPlug 'vim-airline/vim-airline'\r\nPlug 'vim-airline/vim-airline-themes'\r\nPlug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }\r\nPlug 'gilgigilgil/anderson.vim'\r\ncall plug#end()\r\n\r\nvnoremap <C-c> \"+y\r\nmap <C-v> \"+p\r\nnmap <F6> :NERDTreeToggle<CR>\r\n\r\ncolorscheme anderson\r\n\r\nset nu\r\nset ai\r\n```\r\n\r\n2. Open nvim, use `:PlugInstall` to install the new plugins.\r\n\r\n### Some nvim specifc shortcuts\r\n\r\n- <kbd>E</kbd> - to go back the directory after opening a file.\r\n- </kbd>:NERDTree</kbd> - to start the Tree like menu.\r\n- When in NERDTree use </kbd>m</kbd> for creating a file.\r\n\r\n### Vim Commands\r\n\r\n1. `:i` : to come in Insert/Editing Mode.\r\n2. <kbd>Esc</kbd> : for command mode. \r\n3. `:V` : to enable visual mode, use <kbd>shift</kbd> and arrow keys to select text.\r\n4. `:\"+y` : for yanking(copying) text from vim to system's clipboard (tested on Ubuntu 18, might not work on other systems. Search according to your system).\r\n5. `:nohlsearch` : for clearing search highlighting.\r\n6. `:set nu` : to enable Line numbers(left margin).\r\n7. `:\"+p` : to paste from system's clipboard (I have added key bindings for copy/paste in my nvim config file).\r\n8. `:u` : Undo latest changes in vim.\r\n9. <kbd>Ctrl + ws</kbd> : Split Windows horizontally.\r\n10. <kbd>Ctrl + wv</kbd> : Split Windows vertically.\r\n11. <kbd>Ctrl + ww</kbd> : Switch between Windows.\r\n12. <kbd>Ctrl + wq</kbd> : Quit Window.\r\n13. `:earlier N` : Time travel in past N seconds.\r\n14. `:later N` : Time tavel in future N seconds.\r\n15. `:echo $MYVIMRC`: to view location of your default `.vimrc` file.\r\n16. Use `==` in Visual Mode to fix line indent.\r\n---\r\nI will only add stuff here when I start using it or use it for the first time.\r\n\r\n\r\n</details></li>\r\n<li><a href=\"Miscellaneous/record-your-desktop-using-ffmpeg-on-linux.md\">Record your Desktop using `ffmpeg`</a><details><summary> Read More 👇</summary>\r\n\r\n# Record your Desktop using `ffmpeg`\r\n<!--24 June 2020 -->\r\n1. Make sure you have ffmpeg installed, by checking `ffmpeg -version`. If not install use `sudo apt-get install ffmpeg`.\r\n\r\n2. Run the following command.\r\n```bash\r\nffmpeg -video_size 1280x1024 -framerate 25 -f x11grab -i :0.0+0,0 -c:v libx264rgb -crf 0 -preset ultrafast output.mkv\r\n```\r\n- `-video_size` specifies the size of the recorded area. If you have a different screen size, use that instead of 1920x1080. If you want to record only an area of the screen, specify the area size here.\r\n\r\n- `-framerate` specifies the frame rate, i. e. how many frames of video are recorded in a second. The lowest allowed framerate is 20.\r\n\r\n- `-f x11grab` is what actually tells FFmpeg to record your screen. You shouldn't change that.\r\n\r\n- `-i :0.0+0,0` is where you specify the x and y offset of the top left corner of the area that you want to record. For example, use :0.0+100,200 to have an x offset of 100 and an y offset of 200.\r\n\r\n- `-c:v libx264rgb -crf 0 -preset ultrafast` are encoding options. These specify a fast and lossless recording.\r\n\r\n> Run `xdpyinfo | grep 'dimensions:'` to know your monitor dimensions\r\n\r\n## Resources\r\n- [Record-Your-Desktop-Using-FFmpeg-on-Ubuntu-Linux](https://www.wikihow.com/Record-Your-Desktop-Using-FFmpeg-on-Ubuntu-Linux)\r\n</details></li>\r\n<li><a href=\"Miscellaneous/making-releases-github-gittag.md\">Releases on GitHub</a><details><summary> Read More 👇</summary>\r\n\r\n# Releases on GitHub\r\n<!-- 2 Jul 2019 -->\r\nGit tagging is generally used to release software on github.\r\nHere are some basic git commands for tagging.\r\n\r\n- To tag specific points of your repo. Run this when you commit something.\r\n  ```shell\r\n  git tag -a v1.4 -m \"my version 1.4\"\r\n  ```\r\n\r\n- To lists all the tags of your repo.\r\n  ```bash\r\n  git tag\r\n  ```\r\n\r\n- To tag specific commits.\r\n  ```bash\r\n  git tag -a v1.4 9fceb02\r\n  ```\r\n\r\n- To push tags on GitHub.\r\n  ```bash\r\n  git push origin v1.4\r\n  ```\r\n</details></li>\r\n<li><a href=\"Miscellaneous/seo-tools.md\">SEO Tools</a><details><summary> Read More 👇</summary>\r\n\r\n# SEO Tools\r\n<!--15 Oct 2019 -->\r\nHere is a list of some tools to test your website for SEO and Social Media.\r\n\r\n- [Facebook's Sharing Debugger](https://developers.facebook.com/tools/debug/sharing/).\r\n- [Twitter Card Validator](https://cards-dev.twitter.com/validator).\r\n- [Google's Structured Data Testing Tool](https://search.google.com/structured-data/testing-tool/u/0/).\r\n- [web.dev](https://web.dev/)\r\n</details></li>\r\n<li><a href=\"Miscellaneous/semantic-versioning.md\">Semantic Versioning</a><details><summary> Read More 👇</summary>\r\n\r\n# Semantic Versioning\r\n<!-- 24 Jul 2019 -->\r\n- Describes how softwares are assigned version numbers.\r\n- We generally see 3 parts in a version number, `x.y.z` (MAJOR, MINOR, PATCH)\r\n\t1. `x` represents MAJOR part - meant for describing any major backend code changes, support of APIs etc.\r\n\t2. `y` represents MINOR part - meant for describing very small changes.\r\n\t3. `z` represents PATCH part - meant for describing bug fixes.\r\n\r\n\r\n### Resources\r\n- [Semantic Versioning 2.0.0](https://semver.org/)\r\n</details></li>\r\n<li><a href=\"Miscellaneous/creating-procfile-in-heroku.md\">What's a Procfile 👀</a><details><summary> Read More 👇</summary>\r\n\r\n# What's a Procfile 👀\r\n<!--1 Jul 2019 -->\r\nI recently deployed a Python application on Heroku, there I encountered a `Procfile`.\r\nThis is what I got to know :\r\n\r\n- The Procfile is a simple text file that is named `Procfile` without a file extension. For example, `Procfile.txt` is not a valid Procfile.\r\n- It specifies the commands that are executed by the app on startup. For e.g A Django server.\r\n- Example: If you want to run a python script on Heroku, your *Procfile* content should be\r\n   `worker: python script.py`\r\n\r\n### Resources\r\n- [The Procfile](https://devcenter.heroku.com/articles/procfile)\r\n</details></li>\r\n<li><a href=\"Miscellaneous/write-clean-commits-template.md\">Writing Cleaner Commits - Template</a><details><summary> Read More 👇</summary>\r\n\r\n# Writing Cleaner Commits - Template\r\n<!--20 Nov 2019 -->\r\nWriting cleaner commits is hard, so I use this template which makes me a pro 😅\r\n\r\n```text\r\n# If applied, this commit will...\r\n# [Add/Fix/Remove/Update/Refactor/Document] [issue #id] [summary]\r\n\r\n\r\n# Why is it necessary? (Bug fix, feature, improvements?)\r\n-\r\n# How does the change address the issue? \r\n-\r\n# What side effects does this change have?\r\n-\r\n\r\n```\r\n\r\n##### OR\r\n\r\n```text\r\n# If applied, this commit will...\r\n# [Add/Fix/Remove/Update/Refactor/Document]\r\n\r\n# Reference any issue number here\r\n- This fixes #454\r\n# Why is it necessary? (Bug fix, feature, improvements?)\r\n-\r\n# How does the change address the issue? \r\n-\r\n```\r\n\r\n## How ?\r\nYou have to configure Git to use the above template file (for example, `.gitmessage` in your home directory), then create the template file by running.\r\n\r\n```bash\r\ngit config --global commit.template ~/.gitmessage\r\nsubl ~/.gitmessage\r\n```\r\n\r\nThis will invoke sublime with the template (use `code` if you use VSCode) Now copy paste the above template, hit save and your are done.\r\n\r\nNow when commiting changes instead of using `git commit -m \"\"`, Use `git commit` this will invoke the commit template which you already set.\r\n\r\n\r\n### Resources\r\n\r\n- [How to Write a Git Commit Message](https://chris.beams.io/posts/git-commit/)\r\n- [Git commit practices your future self will thank you for](https://victoria.dev/blog/git-commit-practices-your-future-self-will-thank-you-for/)\r\n</details></li>\r\n</ul>\r\n\r\n\r\n### Python\r\n\r\n<ul>\r\n<li><a href=\"Python/cryptographically-strong-random-string.md\">Cryptographically strong random string</a><details><summary> Read More 👇</summary>\r\n\r\n# Cryptographically strong random string\r\n\r\nOne liner\r\n\r\n```bash\r\npython3 -c \"import secrets;print(secrets.token_urlsafe())\"\r\n```\r\n\r\nSample Runs\r\n\r\n```bash\r\n>>> import secrets\r\n>>> secrets.token_urlsafe()\r\n'noLCpWgg5bJbALwlqAKKWUcb4nZg0LvxIUFHyhyei-I'\r\n>>> secrets.token_urlsafe()\r\n'8HhV5FMm2vxfrSoO9o_v65FRy6bLbvc89POSX0fnMqk'\r\n>>> secrets.token_urlsafe()\r\n'bClPydJqA7_0GsDvUAqqShUH5ZucWzdErg0tZIGZU2k'\r\n>>> secrets.token_urlsafe()\r\n'82LSHzCKkwo5y__3NZrck27ZbDL1WiKoSYxQQki8uvA'\r\n>>> \r\n```\r\n</details></li>\r\n<li><a href=\"Python/difference-class-and-function-based-views-djnago.md\">Difference b/w Class & Function Based Views in Django</a><details><summary> Read More 👇</summary>\r\n\r\n# Difference b/w Class & Function Based Views in Django\r\n<!--21 jul 2020 -->\r\n<table>\r\n\t<tr>\r\n\t\t<th>Function Based Views</th>\r\n\t\t<th>Class Based Views</th>\r\n\t</tr>\r\n\t<tr>\r\n\t\t<td>\r\n\t\t<ol>\r\n\t\t\t<li>More setup</li>\r\n\t\t\t<li>Less Abstraction</li>\r\n\t\t\t<li>Requires error checking</li>\r\n\t\t\t<li>Less modular</li>\r\n\t\t</ol>\r\n\t\t</td>\r\n\t\t<td>\r\n\t\t<ol>\r\n\t\t\t<li>Little setup</li>\r\n\t\t\t<li>More \"magic\" abstraction</li>\r\n\t\t\t<li>Error handling built-in (generics)</li>\r\n\t\t\t<li>Much more modular</li>\r\n\t\t\t<li>Sane and stable generic API</li>\r\n\t\t</ol>\r\n\t\t</td>\r\n\t</tr>\r\n</table>\r\n\r\n</details></li>\r\n<li><a href=\"Python/faster-python-tips-and-tricks.md\">Fastest Python First: Tips and Tricks 🏃</a><details><summary> Read More 👇</summary>\r\n\r\n# Fastest Python First: Tips and Tricks 🏃\r\n<!--27 Jun 2019 -->\r\nHere are some tips that I learned to make Python Programs faster (_WIP_).\r\n\r\n1. Always compile regular expression, if you have to match patterns a lot of times.\r\n\r\n```python\r\nimport re\r\n\r\npattern = re.compile(some_regular_expression)\r\nsome_text = re.sub(pattern, '', data)\r\n\r\n```\r\n\r\n2. Use List comprehension for iterating over a list.\r\n\r\n```python\r\nimport time\r\n\r\nitemlist = [23, 45, 56, 67, 1, 100, 340, 90]\r\n\"\"\" Normal Iteration \"\"\"\r\nstart_time = time.time()\r\nfor item in itemlist:\r\n\tif item % 2 == 0:\r\n\t\tprint(item)\r\nend_time = time.time()\r\n\r\nprint(\"Without List Comprehension : \" + str(end_time - start_time))\r\n\r\n\"\"\" List Comprehension \"\"\"\r\nstart_time = time.time()\r\n[print(item) for item in itemlist if item % 2 == 0]\r\nend_time = time.time()\r\n\r\nprint(\"With List Comprehension : \" + str(end_time - start_time))\r\n```\r\n\r\nOutput : \r\n```bash\r\n56\r\n100\r\n340\r\n90\r\nWithout List Comprehension : 0.0002067089080810547\r\n56\r\n100\r\n340\r\n90\r\nWith List Comprehension : 0.00019121170043945312\r\n```\r\n</details></li>\r\n<li><a href=\"Python/functional-programming-in-python.md\">Functional Programming in Python 🐍</a><details><summary> Read More 👇</summary>\r\n\r\n# Functional Programming in Python 🐍\r\n<!--3 Jul 2019 -->\r\nFeatures like `lambda`, `map`, `filter`, `reduce` are generally used to perform functional programming related tasks in Python.\r\nLet's take a quick look on them.\r\n\r\n### Lambdas\r\n- Anonymous functions\r\n- No function name, \r\n- They can be passed as function arguments/objects.\r\n- No `return` statment, evaluated exrpession is returned automatically.\r\n- Single line function.\r\n\r\nExample : \r\n\r\n```python\r\ndouble = lambda x: x*x\r\nprint(double(34))\r\n\r\nelementList = [34, 56, 78, 90, 0, 12]\r\ndoubleList = lambda elementList: [e*e for e in elementList]\r\nprint(doubleList(elementList))\r\n```\r\n\r\n### Map\r\n- applies a function to all the items in an input list.\r\n- `map(function_to_apply, list_of_inputs)`.\r\n\r\nExample :\r\n\r\n```python\r\nmyList = [\"bhupesh\", \"varshney\", \"is\", \"a\", \"developer\"]\r\n\r\ncapitalize = list(map(lambda x: x.upper(), myList))\r\nprint(capitalize)\r\n```\r\n\r\n### Filter\r\n- creates a list of elements for which a function returns `True`.\r\n\r\nExample :\r\n\r\n```python\r\nmylist = [23, 45, 6, 8, 10, 16]\r\nevenList = list(filter(lambda x: x%2 == 0, mylist))\r\nprint(evenList)\r\n```\r\n\r\n### Reduce\r\n- accepts a function and a sequence(list/set *etc*) and returns a single value calculated.\r\n- Initially, the function is called with the first two items from the sequence and the result is returned.\r\n- The function is then called again with the result obtained in step 1 and the next value in the sequence. This process keeps repeating until there are items in the sequence.\r\n\r\nExample :\r\n\r\n```python\r\nfrom functools import reduce\r\n\r\nli = [5, 8, 10, 20, 50, 100]\r\n\r\nsum = reduce((lambda x, y: x + y), li) \r\nprint(sum)\r\n```\r\n\r\n</details></li>\r\n<li><a href=\"Python/pep8.md\">PEP8 - the fashion 💃 police of Python</a><details><summary> Read More 👇</summary>\r\n\r\n# PEP8 - the fashion 💃 police of Python\r\n<!--22 Jun 2019 -->\r\nWell basically PEP8 is a style guide which provides guidelines and best practices\r\nfor writing python code.\r\n\r\n### How I learn?\r\nWell bascially the official Python docs for [PEP8](https://www.python.org/dev/peps/pep-0008/) seems good but I use [pep8.org](https://pep8.org/).\r\nIt provides much more cleaner interface.\r\n\r\n### Summary\r\nBelow is a summary which includes some go-to rules you can memorize.\r\n\r\n1. Use 4 spaces per indentation level.\r\n2. Spaces are preferred instead of tabs (Why ?? :disappointed_relieved:)\r\n   Python disallows mixing of Tabs & Spaces (Syntax Errors).\r\n   So be consistent with what you choose, I prefer tabs :wink:\r\n3. Limit all lines to a maximum of 79 characters. Use \\ to break/continue line.\r\n4. Never use the characters ‘l’ (lowercase letter el), ‘O’ (uppercase letter oh), or ‘I’ (uppercase letter eye) as single character variable names. These are misunderstood with numerals one and zero in some font styles.\r\n5. Function Names - lowercase words separated by _ .\r\n6. Class Names - Start each word with a capital letter. Use CamelCase E.g StudentClass\r\n\r\n### Tools \r\nIf use Sublime Text, you can install [Python PEP8 Autoformat](https://packagecontrol.io/packages/Python%20PEP8%20Autoformat) - it does the job for you.\r\n</details></li>\r\n<li><a href=\"Python/publishing-a-package-on-pypi.md\">Publishing a Package on PyPI</a><details><summary> Read More 👇</summary>\r\n\r\n# Publishing a Package on PyPI\r\n<!-- 31 Oct 2019 -->\r\nI just published my first package on pypi 😍\r\nI used the following steps to do it :\r\n\r\n1. Put your python files/classes inside the folder `package-name`.Also make sure your main class file has the same name `package-name`.\r\n\r\n2. Add the `__init__.py` file in the same folder. Use the init file like this.\r\n```python\r\nfrom coderunner.coderunner import Run\r\n```\r\n\r\n3. Now make a file `setup.py` inside the root of your github folder.\r\nAdd the following contents in it:\r\n```python\r\nimport setuptools\r\n\r\nwith open(\"README.md\", \"r\") as fh:\r\n    long_description = fh.read()\r\n\r\nsetuptools.setup(\r\n    name=\"plagcheck\",\r\n    version=\"0.1\",\r\n    author=\"Bhupesh Varshney\",\r\n    author_email=\"varshneybhupesh@gmail.com\",\r\n    description=\"A Powerful Moss results scrapper\",\r\n    keywords='mosspy moss plagiarism cheat',\r\n    long_description=long_description,\r\n    long_description_content_type=\"text/markdown\",\r\n    url=\"https://github.com/codeclassroom/PlagCheck\",\r\n    project_urls={\r\n        \"Documentation\": \"https://github.com/codeclassroom/PlagCheck/blob/master/docs/docs.md\",\r\n        \"Source Code\": \"https://github.com/codeclassroom/PlagCheck\",\r\n        \"Funding\": \"https://www.patreon.com/bePatron?u=18082750\",\r\n        \"Say Thanks!\": \"https://github.com/codeclassroom/PlagCheck/issues/new?assignees=&labels=&template=---say-thank-you.md&title=\",\r\n    },\r\n    packages=setuptools.find_packages(),\r\n    install_requires=[\r\n        'requests',\r\n        'mosspy',\r\n        'beautifulsoup4',\r\n        'lxml',\r\n    ],\r\n    classifiers=[\r\n        \"Programming Language :: Python :: 3\",\r\n        \"License :: OSI Approved :: MIT License\",\r\n        'Topic :: Software Development :: Build Tools',\r\n        \"Operating System :: OS Independent\",\r\n    ],\r\n    python_requires='>=3.6',\r\n)\r\n```\r\n\r\n4. Now make a file `setup.cfg`. \r\nIt is used for displaying project description on PyPi.\r\n```txt\r\n[metadata]\r\ndescription-file = README.md\r\n```\r\n\r\n5. Install the followig libraries.\r\n```bash\r\npip3 install setuptools wheel twine\r\n```\r\n\r\n6. Run the following command.\r\n```bash\r\npython3 setup.py sdist bdist_wheel\r\n```\r\n\r\n7. Finally upload it to PyPi.\r\n```bash\r\ntwine upload dist/*\r\n```\r\nThis will prompt for your PyPi username and password.\r\n\r\n## Resources\r\n- [Packaging Python Projects](https://packaging.python.org/tutorials/packaging-projects/)\r\n- [How to upload your python package to PyPi](https://medium.com/@joel.barmettler/how-to-upload-your-python-package-to-pypi-65edc5fe9c56)\r\n\r\n</details></li>\r\n<li><a href=\"Python/specify-dev-dependencies-python-package-setup.md\">Specify dev dependencies in setup.py</a><details><summary> Read More 👇</summary>\r\n\r\n# Specify dev dependencies in setup.py\r\n<!--21 jul 2020 -->\r\n```python\r\n# setup.py\r\n...\r\n\r\nextras_require = {\r\n    \"dev\": [\r\n        \"pytest>=3.7\",\r\n    ],\r\n}\r\n```\r\n\r\nTest it locally\r\n\r\n```bash\r\npip install -e .[dev]\r\n```\r\n\r\n</details></li>\r\n<li><a href=\"Python/writing-tests-in-python-using-unittest.md\">Writing Unit Tests in Python ✅</a><details><summary> Read More 👇</summary>\r\n\r\n# Writing Unit Tests in Python ✅\r\n<!--27 Jun 2019 -->\r\n1. Simple and easy just import the Python 3 built-in library `unittest`.\r\n2. Wrap up tests in a Class.\r\n3. Use assert methods.\r\n\r\n```python\r\nimport unittest\r\n\r\nclass TestSum(unittest.TestCase):\r\n\r\n    def test_sum(self):\r\n        self.assertEqual(sum([1, 2, 3]), 6, \"Should be 6\")\r\n\r\n    def test_sum_tuple(self):\r\n        self.assertEqual(sum((1, 2, 2)), 6, \"Should be 6\")\r\n\r\nif __name__ == '__main__':\r\n    unittest.main()\r\n\r\n```\r\n\r\n### Resources\r\n- [Getting Started With Testing in Python](https://realpython.com/python-testing/)\r\n- [unittest — Unit testing framework](https://docs.python.org/3.6/library/unittest.html)\r\n</details></li>\r\n</ul>\r\n\r\n\r\n### Shell\r\n\r\n<ul>\r\n<li><a href=\"Shell/colorize-output-in-terminal-bash.md\">Colorize Output in Terminal</a><details><summary> Read More 👇</summary>\r\n\r\n# Colorize Output in Terminal\r\n<!-- 31 Jan 2020 -->\r\nThe ANSI escape sequences help adding color to the terminal (Doesn't work on Windows I guess)\r\n\r\nHere is the format:\r\n\r\n`\\033[<ForegroundColorCode>;<BackgroundColorCode>;<Style>mYour Text`\r\n\r\nwhere\r\n\r\n`<ForegroundColorCode>`, `<BackgroundColorCode>` & `<Style>` are integer Color Codes.\r\nSee [Resources](##Resources) for list of colors.\r\n\r\nExample : \r\n```bash\r\necho -e \"\\033[92;1mHello\\033[0m\"\r\n```\r\nHello will be bold & green in color\r\n\r\n## Resources\r\n\r\n- [List of ANSI color escape sequences](https://stackoverflow.com/questions/4842424/list-of-ansi-color-escape-sequences)\r\n- [Bash tips: Colors and formatting (ANSI/VT100 Control sequences)](https://misc.flogisoft.com/bash/tip_colors_and_formatting)\r\n\r\n</details></li>\r\n<li><a href=\"Shell/copy-one-file-to-multiple-files.md\">Copy one file to multiple files in Bash</a><details><summary> Read More 👇</summary>\r\n\r\n# Copy one file to multiple files in Bash\r\n<!--24 Dec 2019 -->\r\n```bash\r\nfor f in file{1..10}.py; do cp main.py $f; done\r\n```\r\n> this will create new files file_1.py, file_2.py etc and copy contents of _main.py_ file to all of them.\r\n</details></li>\r\n<li><a href=\"Shell/find-files-changed-7-days-ago.md\">Find files changed 7 days ago</a><details><summary> Read More 👇</summary>\r\n\r\n# Find files changed 7 days ago\r\n\r\nTo find last modified file\r\n```bash\r\nfind Documents/ -mtime -1\r\n```\r\nwhere `mtime` means \"Last Modification Time\"\r\n\r\nTo find files Accessed (read operation)\r\n```bash\r\nfind Documents/ -atime -7\r\n```\r\nwhere `atime` means \"Last Access Time\"\r\n\r\n**-7** signifies anything changed 7 days or less.\r\n**+7** signifies anything changed atleast 7 days ago.\r\n**7** signifies anything changed exactly 7 days ago.\r\n\r\nan alternative version\r\n\r\n```bash\r\nfind Documents/ -newermt \"7 days ago\" -ls\r\n```\r\n</details></li>\r\n<li><a href=\"Shell/find-all-python-virtual-environments-in-your-system.md\">Finding all Python Virtual Environments in your system</a><details><summary> Read More 👇</summary>\r\n\r\n# Finding all Python Virtual Environments in your system\r\n<!-- 10 June 2020 -->\r\nSo if you work with Python all day, you already know about Virtual Environments.\r\nThe only problem with me 😅 is that I end up creating a lot of them when using and making my side-projects.\r\nWe know that there is a `activate` script that can be used for this purpose.\r\n\r\nshut up & give me answer\r\n\r\nOk\r\n\r\n## Using `find`\r\n\r\n```bash\r\nfind /home -name \"*activate\"\r\n```\r\n\r\nThis will list out all activate scripts in your home directory (should work fine).\r\nOnly problem, it is slow.\r\n\r\n**Sample Ouput**\r\n\r\n```\r\n/home/bhupesh/Desktop/testFind/bin/activate\r\n/home/bhupesh/Desktop/bits/bin/activate\r\n/home/bhupesh/Desktop/cc-new/bin/activate\r\n/home/bhupesh/Desktop/test-audio/bin/activate\r\n/home/bhupesh/Desktop/comp-code/bin/activate\r\n/home/bhupesh/Desktop/req-blog/bin/activate\r\n/home/bhupesh/Desktop/py-cli/bin/activate\r\n/home/bhupesh/Desktop/sian-env/bin/activate\r\n/home/bhupesh/Desktop/ques/bin/activate\r\n/home/bhupesh/Documents/api/bin/activate\r\n/home/bhupesh/Documents/defe-venv/bin/activate\r\n/home/bhupesh/Documents/bot-tutorial/bin/activate\r\n/home/bhupesh/Documents/cc/bin/activate\r\n/home/bhupesh/Documents/test-package/bin/activate\r\n/home/bhupesh/Documents/qt-lear/bin/activate\r\n/home/bhupesh/Documents/csv-voil/bin/activate\r\n/home/bhupesh/Documents/bottest/bin/activate\r\n/home/bhupesh/Documents/new-tutorialdb/bin/activate\r\n/home/bhupesh/Documents/cc2/bin/activate\r\n/home/bhupesh/Documents/plag/bin/activate\r\nfind /home -name \"*activate\"  2.57s user 4.14s system 7% cpu 1:31.72 total\r\n```\r\n\r\n## Using `locate`\r\n\r\n```bash\r\nlocate -b '\\activate' | grep \"/home\"\r\n```\r\nGrep your home directory for all activate scripts.\r\n\r\n**Sample Output**\r\n\r\n```\r\n/home/bhupesh/Desktop/bits/bin/activate\r\n/home/bhupesh/Desktop/cc-new/bin/activate\r\n/home/bhupesh/Desktop/comp-code/bin/activate\r\n/home/bhupesh/Desktop/py-cli/bin/activate\r\n/home/bhupesh/Desktop/ques/bin/activate\r\n/home/bhupesh/Desktop/req-blog/bin/activate\r\n/home/bhupesh/Desktop/sian-env/bin/activate\r\n/home/bhupesh/Desktop/test-audio/bin/activate\r\n/home/bhupesh/Desktop/testFind/bin/activate\r\n/home/bhupesh/Documents/api/bin/activate\r\n/home/bhupesh/Documents/bot-tutorial/bin/activate\r\n/home/bhupesh/Documents/bottest/bin/activate\r\n/home/bhupesh/Documents/cc/bin/activate\r\n/home/bhupesh/Documents/cc2/bin/activate\r\n/home/bhupesh/Documents/csv-voil/bin/activate\r\n/home/bhupesh/Documents/defe-venv/bin/activate\r\n/home/bhupesh/Documents/new-tutorialdb/bin/activate\r\n/home/bhupesh/Documents/plag/bin/activate\r\n/home/bhupesh/Documents/qt-lear/bin/activate\r\n/home/bhupesh/Documents/test-package/bin/activate\r\nlocate -b '\\activate'  0.45s user 0.02s system 99% cpu 0.476 total\r\ngrep --color=auto --exclude-dir={.bzr,CVS,.git,.hg,.svn,.idea,.tox} \"/home\"  0.00s user 0.00s system 0% cpu 0.472 total\r\n```\r\n\r\n\r\nNow you can just do `source <path>`.\r\n</details></li>\r\n<li><a href=\"Shell/get-system-info.md\">Get System info using Shell Commands</a><details><summary> Read More 👇</summary>\r\n\r\n# Get System info using Shell Commands\r\n<!-- 19 July 2020 -->\r\n\r\n### Memory Used/Total\r\n\r\n```shell\r\nfree -h | awk '/^Mem:/ {print $3 \"/\" $2}'\r\n```\r\n\r\n### Show CPU temperature\r\n\r\n```shell\r\nsensors | awk '/^Core*/ {print $1$2, $3}'\r\n```\r\n\r\n### Most Memory Intensive processes\r\n\r\n```shell\r\nps axch -o cmd:15,%mem --sort=-%mem | head\r\n```\r\n\r\n### Most CPU Intensive processes\r\n\r\n```shell\r\nps axch -o cmd:15,%cpu --sort=-%cpu | head\r\n```\r\n\r\n</details></li>\r\n<li><a href=\"Shell/total-memory-using-vmstat.md\">Get Total System Memory using `vmstat` command</a><details><summary> Read More 👇</summary>\r\n\r\n# Get Total System Memory using `vmstat` command\r\n<!-- 31 May 2020 -->\r\n```bash\r\nvmstat -s | grep \"total memory\" | grep -Eo '[0-9]{1,}'\r\n```\r\n\r\nThis will print the total memory (your RAM) in highlighted text.\r\n\r\nThe command `vmstat -s` is usually used to print memory statistics a sample output might look like\r\n\r\n```bash\r\n   1882140 K total memory\r\n    644068 K used memory\r\n    861172 K active memory\r\n    653200 K inactive memory\r\n    217160 K free memory\r\n     55140 K buffer memory\r\n    965772 K swap cache\r\n   2097148 K total swap\r\n    230400 K used swap\r\n   1866748 K free swap\r\n    169316 non-nice user cpu ticks\r\n      4939 nice user cpu ticks\r\n     37944 system cpu ticks\r\n    666678 idle cpu ticks\r\n     53315 IO-wait cpu ticks\r\n         0 IRQ cpu ticks\r\n       693 softirq cpu ticks\r\n         0 stolen cpu ticks\r\n   2554778 pages paged in\r\n   1429680 pages paged out\r\n     40722 pages swapped in\r\n    191481 pages swapped out\r\n   3487312 interrupts\r\n  10042547 CPU context switches\r\n1590932382 boot time\r\n      9975 forks\r\n```\r\n\r\n</details></li>\r\n<li><a href=\"Shell/line-discipline-in-unix-linux.md\">Line Discipline in Unix/Linux Machines</a><details><summary> Read More 👇</summary>\r\n\r\n# Line Discipline in Unix/Linux Machines\r\n\r\nLine discipline handles things like <kbd>backspace</kbd> and also generates various signals for special characters like <kbd>Ctrl + C/Z</kbd> etc.\r\n\r\n`stty -a` will display all these settings.\r\nTo know more do `man ssty`.\r\n\r\n## Demo\r\n\r\nOther than <kbd>Ctrl</kbd>+<kbd>c</kbd> and <kbd>Ctrl</kbd>+<kbd>z</kbd> which you already know about. Here are some other tricks.\r\n\r\nFire up your terminal. And start typing....\r\n\r\n<table>\r\n\t<tr>\r\n\t\t<th>Keyboard Shortcut</th>\r\n\t\t<th>Description</th>\r\n\t</tr>\r\n\t<tr>\r\n\t<td><kbd>Ctrl</kbd>+<kbd>?</kbd></td>\r\n\t\t<td>Delete the last input character, Basically Backspace (See what I am talking about, ^? can be used in terminals which may not support the backspace key</td>\r\n\t</tr>\r\n\t<tr>\r\n\t\t<td><kbd>Ctrl</kbd>+<kbd>q</kbd></td>\r\n\t\t<td>Erase line, works like carriage return <code>/r</code></td>\r\n\t</tr>\r\n\t<tr>\r\n\t\t<td><kbd>Ctrl</kbd>+<kbd>a</kbd></td>\r\n\t\t<td>Moves cursor to beginning of line</td>\r\n\t</tr>\r\n\t<tr>\r\n\t\t<td><kbd>Ctrl</kbd>+<kbd>e</kbd></td>\r\n\t\t<td>Moves cursor to end of line</td>\r\n\t</tr>\r\n\t<tr>\r\n\t\t<td><kbd>Ctrl</kbd>+<kbd>w</kbd></td>\r\n\t\t<td>Delete the last input \"word\"</td>\r\n\t</tr>\r\n\t<tr>\r\n\t\t<td><kbd>Ctrl</kbd>+<kbd>k</kbd></td>\r\n\t\t<td>Erase line to the end, from current cursor position</td>\r\n\t</tr>\r\n\t<tr>\r\n\t\t<td><kbd>Ctrl</kbd>+<kbd>y</kbd></td>\r\n\t\t<td>Paste the last erased text</td>\r\n\t</tr>\r\n</table>\r\n\r\nApart from these line input specific keyboard shortcuts. We also have ...\r\n\r\n#### Multiline Input\r\n\r\nUse `/` for continuing the multiline input.\r\n\r\n```bash\r\nbhupesh@dev: hello my name\\\r\nis\\\r\nbhupesh\\\r\ncheck\\\r\n> my boi\\\r\n> hoooo\\\r\n> \r\n```\r\n\r\nA better version\r\n\r\n```bash\r\n#!/bin/bash\r\n\r\necho -e \"Enter Commit Message (Ctrl+d to stop) : \"\r\ncommit_message=$(</dev/stdin)\r\n\r\necho -e \"\\n\\n$commit_message\"\r\n```\r\n\r\nMake it executable and run.\r\n\r\n```bash\r\nEnter Commit Message (Ctrl+d to stop) : \r\n- fixed bug #454\r\n- Increase reponse time\r\n- style fixes\r\n\r\n\r\n- fixed bug #454\r\n- Increase reponse time\r\n- style fixes\r\n\r\n```\r\n\r\nAll of this is controlled by the `tty` driver\r\n\r\n## Resources\r\n\r\n- [The TTY demystified](https://www.linusakesson.net/programming/tty/index.php)\r\n\r\n</details></li>\r\n</ul>\r\n\r\n\r\n### WebDev\r\n\r\n<ul>\r\n<li><a href=\"WebDev/html-datalist-auto-complete.md\">Auto-complete in plain HTML</a><details><summary> Read More 👇</summary>\r\n\r\n# Auto-complete in plain HTML\r\n<!--21 Dec 2019 -->\r\nYou can make a type-ahead/autocomplete like thing in plain HTML\r\nusing the `<datalist></datalist>` tag.\r\n\r\n## Usage\r\n```html\r\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n\t<title></title>\r\n</head>\r\n<body>\r\n<h1>Type Ahead HTML</h1>\r\n<input list=\"test\" placeholder=\"Choose an option\">\r\n<datalist id=\"test\">\r\n\t<option value=\"C++\">\r\n\t<option value=\"Python\">\r\n\t<option value=\"Go\">\r\n\t<option value=\"JavaScript\">\r\n\t<option value=\"HTML\">\r\n</datalist>\r\n</body>\r\n</html>\r\n```\r\n\r\nNow as you type `G` it will show _Go_ ;)\r\n\r\n### Resources\r\n- [tweet by Álvaro Trigo](https://twitter.com/IMAC2/status/1206913760696373253)\r\n</details></li>\r\n<li><a href=\"WebDev/OpenGraph.md\">I learned about Open Graph protocol</a><details><summary> Read More 👇</summary>\r\n\r\n# I learned about Open Graph protocol\r\n<!-- 18 Jun 2019 -->\r\n### What it does ?\r\n- [Open Graph](http://ogp.me/) Makes your website into rich \"graph\" objects.\r\n- Now, what I understand from it is that it provides us to add\r\n  additional metadata to your website which makes it more **rich** on social media.\r\n  For e.g you see the thumbnails of links in the Telegram - *courtesy of OpenGraph*\r\n\r\n### How ?\r\nInformation is added into the `<head>` tags.\r\nFor e.g below is the metadata of one of my [blogs](https://bhupeshv.me/30-Seconds-of-C++/)\r\n\r\n```html\r\n<meta property=\"og:description\" content=\"A collection of C++ STL features (functions/libraries) which can be learned in 30 seconds or less\" />\r\n<meta property=\"og:title\" content=\"30 Seconds of C++\" />\r\n<meta property=\"og:url\" content=\"/30-Seconds-of-C++/\" />\r\n<meta property=\"og:image\" content=\"/images/blog5.png\"/>\r\n```\r\n\r\n### Sidenotes\r\nSocila Media platforms like Twitter, LinkedIn, Telegram heavily use this meta info to render links, display images etc.\r\n</details></li>\r\n<li><a href=\"WebDev/live-edit-html.md\">Live Editing HTML</a><details><summary> Read More 👇</summary>\r\n\r\n# Live Editing HTML\r\n<!-- 6 Nov 2019 -->\r\nYes !, you can live edit webpages by adding the following in the `<html>` tag.\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html contenteditable>\r\n<head>\r\n\t<title>Yay! Live Editing</title>\r\n</head>\r\n<body>\r\n\t<p>Try Editing Tis</p>\r\n</body>\r\n</html>\r\n```\r\n\r\nSetting `contenteditable=\"true\"` will make its content editable.\r\n\r\nSo what ?\r\nWell you can use this HTML5 feature to make a motepad right into your browser.\r\n\r\n```html\r\ndata:text/html, <html contenteditable <head ><title>Notepad</title></head><body style=\"background-color:black;color: white;\"></body></html>\r\n```\r\n</details></li>\r\n<li><a href=\"WebDev/async-defer-html-javascript.md\">`async` & `defer` Attributes</a><details><summary> Read More 👇</summary>\r\n\r\n# `async` & `defer` Attributes\r\n<!-- 21 Jul 2019 -->\r\nUsually javascript files interrupt the parsing of HTML document.\r\nTo prevent this 2 special attributes of the `<script>` elements are used.\r\n\r\n\r\n### `async`\r\n\r\n```js\r\n<script async src=\"script.js\">\r\n```\r\n- The async attribute is used to indicate to the browser that the script file can be executed asynchronously.\r\n- Therefore the HTML parser does not need to pause and wait for the JS code to load, it is intead fetched in parallel.\r\n- It is only available for externally located script files.\r\n\r\n\r\n### `defer`\r\n\r\n```js\r\n<script defer src=\"script.js\">\r\n```\r\n- The defer attribute tells the browser to only execute the script file once the HTML document has been fully parsed.\r\n- The js file can be downloaded but it does not executes until the whole HTML is parsed.\r\n</details></li>\r\n</ul>\r\n---\r\n\r\n## Usage\r\n\r\nSee [USAGE.md](https://github.com/Bhupesh-V/til/blob/master/USAGE.md) to know how I use this repository.\r\n\r\n## Author\r\n\r\n👤 **Bhupesh Varshney**\r\n\r\n- Web : [bhupesh.codes](https://bhupesh-v.github.io)\r\n- Twitter : [@bhupeshimself](https://twitter.com/bhupeshimself)\r\n- DEV : [bhupesh](https://dev.to/bhupesh)\r\n\r\n\r\n## ☺️ Show your support\r\n\r\nSupport me by giving a ⭐️ if this project helped you! or just [![Twitter URL](https://img.shields.io/twitter/url?style=social&url=https%3A%2F%2Fgithub.com%2FBhupesh-V%2Ftil%2F)](https://twitter.com/intent/tweet?url=https://github.com/Bhupesh-V/til&text=til%20via%20@bhupeshimself)\r\n\r\n<a href=\"https://liberapay.com/bhupesh/donate\">\r\n  <img alt=\"Donate using Liberapay\" src=\"https://liberapay.com/assets/widgets/donate.svg\" width=\"100\">\r\n</a>\r\n\r\n<a href=\"https://www.patreon.com/bhupesh\">\r\n  <img alt=\"Patron Bhupesh\" src=\"https://c5.patreon.com/external/logo/become_a_patron_button@2x.png\" width=\"160\">\r\n</a>\r\n\r\n## 📝 License\r\n\r\nCopyright © 2020 [Bhupesh Varshney](https://github.com/Bhupesh-V).<br />\r\nThis project is [MIT](https://github.com/Bhupesh-V/til/blob/master/LICENSE) licensed.\r\n\r\n## About\r\n\r\nOriginal Idea/Work [thoughtbot/til](https://github.com/thoughtbot/til).\r\n","note":"Don't delete this file! It's used internally to help with page regeneration."}